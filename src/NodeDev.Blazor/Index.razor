@inject Services.DebuggedPathService DebuggedPathService

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout Style="height: 100vh; width: 100%; overflow: hidden">
    <MudAppBar Elevation="1">
        <MudButton OnClick="Save" Class="ml-3">Save</MudButton>
        <MudButton OnClick="Add" Class="ml-3">Add node</MudButton>
        <MudButton OnClick="Run" Class="ml-3">Run</MudButton>
        <MudButton OnClick="SwitchLiveDebugging">@(Project.IsLiveDebuggingEnabled ? "Stop Live Debugging" : "Start Live Debugging")</MudButton>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudMainContent Style="width: 100%; height: 100%; overflow-y: hidden">

        <MudExtensions.MudSplitter EnableSlide="true" Sensitivity="0.01" @bind-Dimension="ProjectExplorerGraphPercentage" Class="wh100 overflow-hidden">
            <StartContent>
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-2 wh100" KeepPanelsAlive="true" Class="wh100">
                    <MudTabPanel Text="Project">
                        <ProjectExplorer Project="Project" @bind-SelectedClass="SelectedClass"></ProjectExplorer>
                    </MudTabPanel>
                    <MudTabPanel Text="Class">
                        @if (SelectedClass != null)
                        {
                            <ClassExplorer @key="SelectedClass" Class="SelectedClass" SelectedMethodChanged="OpenMethod"></ClassExplorer>
                        }
                    </MudTabPanel>
                </MudTabs>
            </StartContent>

            <EndContent>
                <MudExtensions.MudSplitter Class="wh100 pa-1 relative overflow-y-hidden" @bind-Dimension="SourceViewerGraphPercentage" OnDoubleClicked="@(_ => SourceViewerGraphPercentage = 100)">
                    <StartContent>
                        @* The 'relative' div is used to control the "Open/Close" icon for the debugger console panel as well as the source viewer open icon *@
                        <div class="wh100 relative flex-1 overflow-y-hidden">

                            <MudStack Row="false" Class="wh100">

                                <DebuggedPathView OpenMethod="OpenMethodFromDebuggedPath" />

                                <CascadingValue Value="this" IsFixed="true">
                                    <MudTabs @ref="Tabs" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-2 wh100" KeepPanelsAlive="true" Class="wh100" @bind-ActivePanelIndex="ActivePanelIndex">
                                        @foreach (var method in OpenedMethods)
                                        {
                                            <MudTabPanel ID="method" @key="method" Text="@method.Name">
                                                <GraphCanvas @key="method.Graph" Graph="method.Graph"></GraphCanvas>
                                            </MudTabPanel>
                                        }
                                    </MudTabs>
                                </CascadingValue>

                                <DebuggerConsolePanel Project="Project" />

                            </MudStack>

                        </div>

                        <div class="h100 absolute d-flex" style="right: 0px">
                            <MudIconButton Icon="@(SourceViewerGraphPercentage <= 75 ? Icons.Material.Filled.ArrowRight : Icons.Material.Filled.ArrowLeft)" OnClick="SwitchSourceViewerGraph" Style="margin-top: auto; margin-bottom: auto" />
                        </div>

                    </StartContent>

                    <EndContent>
                        <SourceViewer Method="@(OpenedMethods.Count > 0 ? OpenedMethods[ActivePanelIndex] : null)" IsVisible="@(SourceViewerGraphPercentage != 100)" />
                    </EndContent>
                </MudExtensions.MudSplitter>
            </EndContent>

        </MudExtensions.MudSplitter>
    </MudMainContent>
</MudLayout>

@code {

    private Core.Project Project { get; set; } = null!;

    private Core.Class.NodeClass? SelectedClass { get; set; }

    private List<Core.Class.NodeClassMethod> OpenedMethods { get; } = new();

    private MudTabs Tabs { get; set; } = null!;

    private int ActivePanelIndex = 0;

    private double SourceViewerGraphPercentage = 100;
    private double SourceOpenedGraphPercentage = 75;
    private double ProjectExplorerGraphPercentage = 18;

    protected override void OnInitialized()
    {
        if (File.Exists("project.json"))
            Project = Core.Project.Deserialize(File.ReadAllText("project.json"));
        else
            Project = Core.Project.CreateNewDefaultProject();

        DebuggedPathService.ChangeProject(Project);
    }

    private void SwitchSourceViewerGraph()
    {
        if (SourceViewerGraphPercentage <= 75)
        {
            SourceOpenedGraphPercentage = SourceViewerGraphPercentage;
            SourceViewerGraphPercentage = 100;
        }
        else
        {
            SourceViewerGraphPercentage = SourceOpenedGraphPercentage;
        }
    }

    public void OpenMethodFromDebuggedPath(Core.Class.NodeClassMethod? method)
    {
        if (method == null)
        {
            // Find the main method
            var program = Project.Classes.FirstOrDefault(x => x.Name == "Program");

            // Find the main method in the program class
            method = program?.Methods.FirstOrDefault(x => x.Name == "Main");
        }

        OpenMethod(method);
    }

    public void OpenMethod(Core.Class.NodeClassMethod? method)
    {
        if (method == null)
            return;
        if (!OpenedMethods.Contains(method))
            OpenedMethods.Add(method);

        ActivePanelIndex = OpenedMethods.IndexOf(method);
        StateHasChanged();
    }

    private void Save()
    {
        var content = Project.Serialize();
        File.WriteAllText("project.json", content);
    }

    private void Add()
    {
        //GraphCanvas?.ShowAddNode();
    }

    public void Run()
    {
        new Thread(() =>
        {
            Project.Run(Project.IsLiveDebuggingEnabled ? Core.BuildOptions.Debug : Core.BuildOptions.Release);
        }).Start();
    }

    private void SwitchLiveDebugging()
    {
        if (Project.IsLiveDebuggingEnabled)
            Project.StopLiveDebugging();
        else
            Project.StartLiveDebugging();
    }
}