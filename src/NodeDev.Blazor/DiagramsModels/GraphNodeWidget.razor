@using global::Blazor.Diagrams.Core.Models

<div class="drop-shadow-lg bg-white border my-node" @ondblclick="OnDoubleClick">


	<div class="bg-main pa-2 mb-1 font-semibold text-white uppercase title relative">
		@if (Node.Node.AlternatesOverloads.Any())
		{
			<MudIconButton Class="overload-icon" Icon="@Icons.Material.Filled.ChangeCircle" OnClick="() => GraphCanvas.OnOverloadSelectionRequested(Node)" />
		}
		@{
			var undefinedGenerics = Node.Node.GetUndefinedGenericTypes().ToList();
		}
		<span>@Node.Node.Name</span>
		@if (undefinedGenerics.Count != 0)
		{
			<span class="ml-1">&lt;</span>
			@foreach (var undefinedGeneric in undefinedGenerics)
			{
				<span class="ml-1 undefined-generic" @onclick="() => GraphCanvas.OnGenericTypeSelectionMenuAsked(Node, undefinedGeneric)">@(undefinedGeneric.Name + (undefinedGeneric == undefinedGenerics[^1] ? "" : ", "))</span>
			}
			<span class="ml-1">&gt;</span>
		}
	</div>

	@{
		var inputs = Node.Ports.OfType<GraphPortModel>().Where(x => x.Alignment == PortAlignment.Left).OrderBy(x => !x.Connection.Type.IsExec).ToList();
		var outputs = Node.Ports.OfType<GraphPortModel>().Where(x => x.Alignment == PortAlignment.Right).OrderBy(x => !x.Connection.Type.IsExec).ToList();
		var nbRows = Math.Max(inputs.Count, outputs.Count);
	}
	@for (int i = 0; i < nbRows; ++i)
	{
		<div class="row">
			@if (i < inputs.Count)
			{
				@GetPort(inputs[i], true, i < outputs.Count)
			}
			@if (i < outputs.Count)
			{
				@GetPort(outputs[i], false, i < inputs.Count)
			}
		</div>
	}
</div>

@code {

	[Parameter]
	public GraphNodeModel Node { get; set; } = null!;

	[CascadingParameter]
	public GraphCanvas GraphCanvas { get; set; } = null!;

	private RenderFragment GetPort(GraphPortModel port, bool isInput, bool sharingRow) =>
	@<div class="@($"col {(isInput ? "input" : "output")} {(sharingRow ? "sharing" : "")}")">
		<div class="name">
			<span class="@(isInput ? "pl-3 pr-1" : "pr-3 pl-1")">@port.Connection.Name</span>
		</div>

		<MudTooltip Text="@port.Connection.Type.FriendlyName" Placement="Placement.Top">
			<PortRenderer @key="port" Port="port" Class="rounded-full absolute" Style="@("background-color:" + port.PortColor)" />
		</MudTooltip>

		@if (isInput && port.Connection.Type.AllowTextboxEdit && port.Links.Count == 0)
	{
		<MudTextField T="string" Class="border rounded pr-2" Value="@port.Connection.TextboxValue" ValueChanged="x => GraphCanvas.OnTextboxValueChanged(port, x)" Label="@port.Connection.Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
	}
	</div>
	;


	private void OnDoubleClick()
	{
		GraphCanvas.OnNodeDoubleClick(Node.Node);
	}
}