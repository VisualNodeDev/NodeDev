<MudStack Row="false" Class="wh100">
	<MudText>@Class.Name</MudText>

	<MudMenu ActivationEvent="@MouseEvent.RightClick" PositionAtCursor="true" Class="flex-1 w100" AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.TopLeft" Dense="true">
		<ActivatorContent>
			<MudTreeView T="TreeItem" Items="Items" SelectedValueChanged="OnSelectedItemChanged" Dense="true">
				<ItemTemplate>
					@if (context == CurrentlyEditingItem)
					{
						<MudTextField T="string" @bind-Value="Text" Variant="Variant.Text" OnKeyUp="OnEditTextKeyUp" AutoFocus="true"></MudTextField>
					}
					else if (context.Type == TreeItemType.MethodsFolder || context.Type == TreeItemType.PropertiesFolder)
					{
						<MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.Children" Value="@context" Text="@context.Name" EndTextTypo="@Typo.caption" />
					}
					else if (context.Type == TreeItemType.Method || context.Type == TreeItemType.Property)
					{
						<MudTreeViewItem @bind-Expanded="@context.IsExpanded" Value="@context" Text="@context.Name" EndTextTypo="@Typo.caption" />
					}
				</ItemTemplate>
			</MudTreeView>
		</ActivatorContent>
		<ChildContent>
			@if (SelectedTreeItem != null)
			{
				if (SelectedTreeItem.Type == TreeItemType.MethodsFolder)
				{
					<MudMenuItem OnClick="ShowAddMethodMenu">Create new method</MudMenuItem>
				}
				else if (SelectedTreeItem.Type == TreeItemType.Method)
				{
					<MudMenuItem OnClick="ShowRenameMenu">Rename method</MudMenuItem>
				}
				else if (SelectedTreeItem.Type == TreeItemType.PropertiesFolder)
				{
					<MudMenuItem OnClick="ShowNewProperty">Create new property</MudMenuItem>
				}
				else
				{
					<MudMenuItem>Edit method (TODO)</MudMenuItem>
				}
			}
		</ChildContent>
	</MudMenu>
</MudStack>

@code {

	private enum TreeItemType
	{
		PropertiesFolder,
		Property,
		MethodsFolder,
		Method
	}
	private record class TreeItem(HashSet<TreeItem> Children, TreeItemType Type, NodeDev.Core.Class.NodeClassMethod? Method, NodeDev.Core.Class.NodeClassProperty? Property)
	{
		public string Name { get; set; } = "";
		public bool IsExpanded { get; set; } = true;
	}

	[Parameter]
	public NodeDev.Core.Class.NodeClass Class { get; set; } = null!;

	[Parameter]
	public NodeDev.Core.Class.NodeClassMethod? SelectedMethod { get; set; }

	[Parameter]
	public EventCallback<NodeDev.Core.Class.NodeClassMethod?> SelectedMethodChanged { get; set; }

	private TreeItem? SelectedTreeItem;

	private HashSet<TreeItem> Items { get; } = new();

	private TreeItem? CurrentlyEditingItem = null;
	private string? Text = null;
	public bool IsNew = false;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		Items.Add(new(new(), TreeItemType.MethodsFolder, null, null)
			{
				Name = "Methods"
			});

		Items.Add(new(new(), TreeItemType.PropertiesFolder, null, null)
			{
				Name = "Properties"
			});

		foreach (var method in Class.Methods)
		{
			Items.First(x => x.Type == TreeItemType.MethodsFolder).Children.Add(new(new(), TreeItemType.Method, method, null)
				{
					Name = method.Name
				});
		}

		foreach (var property in Class.Properties)
		{
			Items.First(x => x.Type == TreeItemType.PropertiesFolder).Children.Add(new(new(), TreeItemType.Property, null, property)
				{
					Name = property.Name
				});
		}
	}

	private void ShowAddMethodMenu()
	{
		CurrentlyEditingItem = new TreeItem(new(), TreeItemType.Method, null, null)
			{
				Name = "NewMethod"
			};
		IsNew = true;
		Text = CurrentlyEditingItem.Name;

		Items.First(x => x.Type == TreeItemType.MethodsFolder).Children.Add(CurrentlyEditingItem);
	}

	private void ShowNewProperty()
	{
		CurrentlyEditingItem = new TreeItem(new(), TreeItemType.Property, null, null)
			{
				Name = "NewProperty"
			};
		IsNew = true;
		Text = CurrentlyEditingItem.Name;

		Items.First(x => x.Type == TreeItemType.PropertiesFolder).Children.Add(CurrentlyEditingItem);
	}

	private void ShowRenameMenu()
	{
		if (SelectedTreeItem == null)
			return;

		CurrentlyEditingItem = SelectedTreeItem;
		IsNew = false;
		Text = CurrentlyEditingItem.Name;
	}

	private void OnEditTextKeyUp(KeyboardEventArgs args)
	{
		if (args.Key != "Enter" || string.IsNullOrWhiteSpace(Text) || CurrentlyEditingItem == null)
			return;

		if (IsNew)
		{
			if (CurrentlyEditingItem.Type == TreeItemType.Method)
			{
				var method = new Core.Class.NodeClassMethod(Class, Text, Class.TypeFactory.Get(typeof(void)), new Core.Graph());
				method.Graph.AddNode(new Core.Nodes.Flow.EntryNode(method.Graph));
				method.Graph.AddNode(new Core.Nodes.Flow.ReturnNode(method.Graph));
				Class.Methods.Add(method);

				Items.First(x => x.Type == TreeItemType.MethodsFolder).Children.Remove(CurrentlyEditingItem);
				Items.First(x => x.Type == TreeItemType.MethodsFolder).Children.Add(new(new(), TreeItemType.Method, method, null)
					{
						Name = method.Name
					});
			}
			else if (CurrentlyEditingItem.Type == TreeItemType.Property)
			{
				var property = new Core.Class.NodeClassProperty(Class, Text, Class.TypeFactory.Get<double>());
				Class.Properties.Add(property);

				Items.First(x => x.Type == TreeItemType.PropertiesFolder).Children.Remove(CurrentlyEditingItem);
				Items.First(x => x.Type == TreeItemType.PropertiesFolder).Children.Add(new(new(), TreeItemType.Property, null, property)
					{
						Name = property.Name
					});
			}
		}
		else if (CurrentlyEditingItem.Method != null)
		{
			CurrentlyEditingItem.Method.Rename(Text);
			CurrentlyEditingItem.Name = Text;
		}


		CurrentlyEditingItem = null;
		Text = null;
	}

	private void OnSelectedItemChanged(TreeItem? tree)
	{
		if (CurrentlyEditingItem != null)
		{
			// remove the textbox
			if (IsNew)
				Items.First().Children.Remove(CurrentlyEditingItem);

			CurrentlyEditingItem = null;
			Text = null;
		}

		SelectedTreeItem = tree;

		if (tree?.Type == TreeItemType.Method)
		{
			SelectedMethod = tree.Method;
			_ = SelectedMethodChanged.InvokeAsync(SelectedMethod);
		}
		else
		{
			SelectedMethod = null;
			_ = SelectedMethodChanged.InvokeAsync(SelectedMethod);
		}

	}

}