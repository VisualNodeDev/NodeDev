@inject IDialogService DialogService

<MudStack Row="false" Class="wh100">
	<MudText>@Class.Name</MudText>

	<MudTreeView T="TreeItem" Items="Items" SelectedValueChanged="OnSelectedItemChanged" Dense="true" Class="w100">
		<ItemTemplate>
			@if (context == CurrentlyEditingItem)
			{
				<MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.Children" Value="@context" Text="@context.Name" EndTextTypo="@Typo.caption">
					<BodyContent Context="Item">
						<MudTextField T="string" @bind-Value="Text" Variant="Variant.Text" OnKeyUp="OnEditTextKeyUp" AutoFocus="true"></MudTextField>
					</BodyContent>
				</MudTreeViewItem>
			}
			else if (context.Type == TreeItemType.MethodsFolder || context.Type == TreeItemType.PropertiesFolder)
			{
				<MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.Children" Value="@context" Text="@context.Name" EndTextTypo="@Typo.caption">
					<BodyContent Context="Item">
						<div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%" @onmouseover="() => Hovered = Item" @onmouseout="() => Hovered = null">
							<MudText Style="justify-self: start;">@Item.Text</MudText>
							<div style="@($"justify-self: end; visibility: {(Hovered == Item ? "visible" : "hidden")}")">
								<MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Inherit" OnClick="context.Type == TreeItemType.MethodsFolder ? ShowAddMethodMenu : ShowNewProperty" />
							</div>
						</div>
					</BodyContent>
				</MudTreeViewItem>
			}
			else if (context.Type == TreeItemType.Method)
			{
				<MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.Children" Value="@context" Text="@context.Name" EndTextTypo="@Typo.caption">
					<BodyContent Context="Item">
						<div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%" @onmouseover="() => Hovered = Item" @onmouseout="() => Hovered = null">
							<MudText Style="justify-self: start;">@Item.Value.Method!.ReturnType.FriendlyName @Item.Text (@string.Join(',', Item.Value.Method!.Parameters.Select( x=> $"{x.ParameterType.FriendlyName} {x.Name}")))</MudText>
							<div style="@($"justify-self: end; visibility: {(Hovered == Item ? "visible" : "hidden")}")">
								<MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" OnClick="() => ShowMethodEdit(Item.Value)" />
								<MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Inherit" OnClick="() => ShowRenameMenu(Item.Value)" />
							</div>
						</div>
					</BodyContent>
				</MudTreeViewItem>
			}
			else if (context.Type == TreeItemType.Property && context.Property != null)
			{
				<MudTreeViewItem @bind-Expanded="@context.IsExpanded" Value="@context" Text="@context.Name" EndTextTypo="@Typo.caption">
					<BodyContent Context="Item">
						<div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%" @onmouseover="() => Hovered = Item" @onmouseout="() => Hovered = null">
							<MudText Style="justify-self: start;">@Item.Value.Property!.PropertyType.FriendlyName @Item.Text</MudText>
							<div style="@($"justify-self: end; visibility: {(Hovered == Item ? "visible" : "hidden")}")">
								<MudIconButton Icon="@Icons.Material.Filled.ShapeLine" Size="Size.Medium" Color="Color.Inherit" OnClick="() => ShowPropertyTypeEdit(Item.Value)" />
								<MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" OnClick="() => ShowRenameMenu(Item.Value)" />
								<MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Color="Color.Inherit" />
							</div>
						</div>
					</BodyContent>
				</MudTreeViewItem>
			}
		</ItemTemplate>
	</MudTreeView>
</MudStack>


@code {

	private enum TreeItemType
	{
		PropertiesFolder,
		Property,
		MethodsFolder,
		Method
	}
	private record class TreeItem(HashSet<TreeItem> Children, TreeItemType Type, NodeDev.Core.Class.NodeClassMethod? Method, NodeDev.Core.Class.NodeClassProperty? Property)
	{
		public string Name { get; set; } = "";
		public bool IsExpanded { get; set; } = true;
	}

	[Parameter]
	public NodeDev.Core.Class.NodeClass Class { get; set; } = null!;

	[Parameter]
	public NodeDev.Core.Class.NodeClassMethod? SelectedMethod { get; set; }

	[Parameter]
	public EventCallback<NodeDev.Core.Class.NodeClassMethod?> SelectedMethodChanged { get; set; }

	private TreeItem? SelectedTreeItem;

	private HashSet<TreeItem> Items { get; } = new();

	private MudTreeViewItem<TreeItem>? Hovered = null;

	private TreeItem? CurrentlyEditingItem = null;
	private string? Text = null;
	public bool IsNew = false;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		Items.Add(new(new(), TreeItemType.MethodsFolder, null, null)
			{
				Name = "Methods"
			});

		Items.Add(new(new(), TreeItemType.PropertiesFolder, null, null)
			{
				Name = "Properties"
			});

		foreach (var method in Class.Methods)
		{
			Items.First(x => x.Type == TreeItemType.MethodsFolder).Children.Add(new(new(), TreeItemType.Method, method, null)
				{
					Name = method.Name
				});
		}

		foreach (var property in Class.Properties)
		{
			Items.First(x => x.Type == TreeItemType.PropertiesFolder).Children.Add(new(new(), TreeItemType.Property, null, property)
				{
					Name = property.Name
				});
		}
	}

	private void ShowAddMethodMenu()
	{
		CurrentlyEditingItem = new TreeItem(new(), TreeItemType.Method, null, null)
			{
				Name = "NewMethod"
			};
		IsNew = true;
		Text = CurrentlyEditingItem.Name;

		Items.First(x => x.Type == TreeItemType.MethodsFolder).Children.Add(CurrentlyEditingItem);
	}

	private void ShowNewProperty()
	{
		CurrentlyEditingItem = new TreeItem(new(), TreeItemType.Property, null, null)
			{
				Name = "NewProperty"
			};
		IsNew = true;
		Text = CurrentlyEditingItem.Name;

		Items.First(x => x.Type == TreeItemType.PropertiesFolder).Children.Add(CurrentlyEditingItem);
	}

	private void ShowRenameMenu(TreeItem item)
	{
		if (item == null)
			return;

		CurrentlyEditingItem = item;
		IsNew = false;
		Text = CurrentlyEditingItem.Name;
	}

	private async Task ShowPropertyTypeEdit(TreeItem item)
	{
		var result = await DialogService.Show<TypeSelectorDialog>("", new()
			{
				[nameof(TypeSelectorDialog.TypeFactory)] = Class.TypeFactory
			}, new DialogOptions()
			{
				FullScreen = true,
				FullWidth = true
			}).Result;

		NodeDev.Core.Types.TypeBase typeBase;
		if (result.Data is Type type)
			typeBase = Class.TypeFactory.Get(type, null);
		else if (result.Data is NodeDev.Core.Types.TypeBase t)
			typeBase = t;
		else
			return;

		item.Property!.ChangeType(typeBase);
	}

	private async Task ShowMethodEdit(TreeItem item)
	{
		var result = await DialogService.Show<EditMethodMenu>("", new()
			{
				[nameof(EditMethodMenu.Method)] = item.Method
			}, new DialogOptions()
			{
				FullScreen = false,
				FullWidth = true,
				MaxWidth = MaxWidth.Large
			}).Result;
	}

	private void OnEditTextKeyUp(KeyboardEventArgs args)
	{
		if (args.Key != "Enter" || string.IsNullOrWhiteSpace(Text) || CurrentlyEditingItem == null)
			return;

		if (IsNew)
		{
			if (CurrentlyEditingItem.Type == TreeItemType.Method)
			{
				var method = new Core.Class.NodeClassMethod(Class, Text, Class.TypeFactory.Get(typeof(void), null), new Core.Graph());
				method.Graph.AddNode(new Core.Nodes.Flow.EntryNode(method.Graph));
				method.Graph.AddNode(new Core.Nodes.Flow.ReturnNode(method.Graph));
				Class.Methods.Add(method);

				Items.First(x => x.Type == TreeItemType.MethodsFolder).Children.Remove(CurrentlyEditingItem);
				Items.First(x => x.Type == TreeItemType.MethodsFolder).Children.Add(new(new(), TreeItemType.Method, method, null)
					{
						Name = method.Name
					});
			}
			else if (CurrentlyEditingItem.Type == TreeItemType.Property)
			{
				var property = new Core.Class.NodeClassProperty(Class, Text, Class.TypeFactory.Get<double>());
				Class.Properties.Add(property);

				Items.First(x => x.Type == TreeItemType.PropertiesFolder).Children.Remove(CurrentlyEditingItem);
				Items.First(x => x.Type == TreeItemType.PropertiesFolder).Children.Add(new(new(), TreeItemType.Property, null, property)
					{
						Name = property.Name
					});
			}
		}
		else if (CurrentlyEditingItem.Method != null)
		{
			CurrentlyEditingItem.Method.Rename(Text);
			CurrentlyEditingItem.Name = Text;
		}
		else if (CurrentlyEditingItem.Property != null)
		{
			CurrentlyEditingItem.Property.Rename(Text);
			CurrentlyEditingItem.Name = Text;
		}

		CurrentlyEditingItem = null;
		Text = null;
	}

	private void OnSelectedItemChanged(TreeItem? tree)
	{
		if (CurrentlyEditingItem != null)
		{
			// remove the textbox
			if (IsNew)
				Items.First().Children.Remove(CurrentlyEditingItem);

			CurrentlyEditingItem = null;
			Text = null;
		}

		SelectedTreeItem = tree;

		if (tree?.Type == TreeItemType.Method)
		{
			SelectedMethod = tree.Method;
			_ = SelectedMethodChanged.InvokeAsync(SelectedMethod);
		}
		else
		{
			SelectedMethod = null;
			_ = SelectedMethodChanged.InvokeAsync(SelectedMethod);
		}

	}

}