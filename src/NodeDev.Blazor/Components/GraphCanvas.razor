@using global::Blazor.Diagrams.Components.Widgets

<div style="height: 100%; width: 100%">

	@if (IsShowingNodeSelection)
	{
		<div @onclick="CancelPopup" style="background-color: var(--mud-palette-overlay-dark); width: 100%; height: 100%; position: absolute; z-index: 1">
			<NodeDev.Blazor.Components.NodeSelection PositionX="PopupX" PositionY="PopupY" GraphCanvas="this" OnNodeTypeSelected="OnNewNodeTypeSelected" Connection="PopupNodeConnection" />
		</div>
	}
	@if (IsShowingGenericTypeSelection)
	{
		<div @onclick="CancelPopup" style="background-color: var(--mud-palette-overlay-dark); width: 100%; height: 100%; position: absolute; z-index: 1">
			<NodeDev.Blazor.Components.TypeSelector PositionX="PopupX" PositionY="PopupY" TypeFactory="Graph.SelfClass.TypeFactory" OnTypeSelected="OnGenericTypeSelected" />
		</div>
	}
	@if (IsShowingOverloadSelection && PopupNode != null)
	{
		<div @onclick="CancelPopup" style="background-color: var(--mud-palette-overlay-dark); width: 100%; height: 100%; position: absolute; z-index: 1">
			<NodeDev.Blazor.Components.AlternateOverloadsSelection OnNodeMethodSelected="OnNewOverloadSelected" Node="PopupNode" />
		</div>
	}

	<div style="width:100%; height:100%;">
		<CascadingValue Value="this" IsFixed="true">
			<CascadingValue Value="Diagram" IsFixed="true">
				<Blazor.Diagrams.Components.DiagramCanvas>
					<Widgets>
						<GridWidget Size="30" Mode="GridMode.Line" BackgroundColor="white" />
						<SelectionBoxWidget />
					</Widgets>
				</Blazor.Diagrams.Components.DiagramCanvas>
			</CascadingValue>
		</CascadingValue>
	</div>

</div>