@using NodeDev.Core;
@using NodeDev.Core.Class;
@using System.Reactive.Linq;

@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages

<style>
    .sourceViewer, .sourceViewer > .mud-tabs-panels {
        width: 100%;
        height: 100%
    }
</style>

@if (Method == null || CodeCs == null || CodeMsil == null)
{
    <MudText Typo="Typo.caption">Open a method to view its generated source code</MudText>
}
else
{
    <MudTabs Class="sourceViewer">
        <MudTabPanel Text="Debug pseudo-CS" Class="wh100">
            <StandaloneCodeEditor @key="CodeCs.GetHashCode().ToString()" ConstructionOptions="@(x => EditorConstructionOptions(x, CodeCs, "csharp"))" CssClass="wh100" />
        </MudTabPanel>
        <MudTabPanel Text="Debug MSIL" Class="wh100">
            <StandaloneCodeEditor @key="CodeMsil.GetHashCode().ToString()" ConstructionOptions="@(x => EditorConstructionOptions(x, CodeMsil, "yaml"))" CssClass="wh100" />
        </MudTabPanel>
    </MudTabs>
}

@code {
    [Parameter]
    public NodeClassMethod? Method { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }

    private NodeClassMethod? PreviousMethod { get; set; }

    private IDisposable? GraphChangedSubscription { get; set; }

    private string? CodeMsil;
    private string? CodeCs;

    private NodeClassTypeCreator? Creator;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor, string code, string language)
    {
        return new()
            {
                ReadOnly = true,
                Value = code,
                Language = language,
                AutomaticLayout = true,
                Minimap = new()
                {
                    Enabled = false
                }
            };
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (!IsVisible)
            return;

        // Either the target method changed or it previously failed to compile
        if (Method != PreviousMethod || Creator == null)
        {
            if (Method?.Graph.Project != PreviousMethod?.Graph.Project)
            {
                GraphChangedSubscription?.Dispose();
                Creator = null;

                if (Method != null)
                    GraphChangedSubscription = Method.Graph.Project.GraphChanged.Where(x => x.Graph == Method?.Graph).AcceptThenSample(TimeSpan.FromSeconds(1)).Delay(TimeSpan.FromSeconds(1)).Subscribe(x => InvokeAsync(() => OnGraphChanged(x.Graph)));
            }

            PreviousMethod = Method;
            CodeCs = null; // we don't want to leave the code from the previous method visible
            CodeMsil = null;

            if (Method != null)
                OnGraphChanged(Method.Graph);
        }
    }

    private void OnGraphChanged(Graph graph)
    {
        ArgumentNullException.ThrowIfNull(Method);

        try
        {
            Creator = Method.Graph.Project.CreateNodeClassTypeCreator(Core.BuildOptions.Debug with { PreBuildOnly = true });
            Creator.CreateProjectClassesAndAssembly();

            try
            {
                Creator.GetBodyAsCsAndMsilCode(Method, out CodeCs, out CodeMsil);

                CodeCs = $"// Pseudo code for debugging.{System.Environment.NewLine}// This is not the actual code executed, we execute IL directly!{System.Environment.NewLine}{CodeCs}";

                StateHasChanged();
            }
            catch (BuildError buildError)
            {
                CodeCs = $"/* Error during code generation of node {buildError.Node.Name}: {System.Environment.NewLine}{buildError.Message}{System.Environment.NewLine}";
                CodeMsil = "";

                if (buildError.InnerException != null)
                    CodeCs += $"{System.Environment.NewLine}Inner exception:{System.Environment.NewLine}{buildError.InnerException}";

                CodeCs += $"{System.Environment.NewLine}*/";
            }
            catch (Exception ex)
            {
                CodeCs = $"/* Error during code generation: {System.Environment.NewLine}{ex}{System.Environment.NewLine}*/";
                CodeMsil = "";
            }
        }
        catch (Exception)
        {
            Creator = null;
            return;
        }
    }
}
